import 'dart:developer';
import 'dart:io';

import 'package:bookara/core/services/network/api_enpoint.dart';
import 'package:bookara/core/services/network/api_intercepter.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class ApiClient extends GetxService {
  late final Dio _dio;
  final Connectivity _connectivity = Connectivity();
  late final RxBool isConnected = true.obs;

  @override
  void onInit() {
    super.onInit();

    // L·∫Øng nghe s·ª± thay ƒë·ªïi m·∫°ng
    _connectivity.onConnectivityChanged.listen((
      List<ConnectivityResult> results,
    ) {
      if (results.isNotEmpty) {
        _handleConnectivityChange(results.first);
      }
    });

    // Ki·ªÉm tra m·∫°ng l·∫ßn ƒë·∫ßu
    Future.microtask(() async {
      final hasNetwork = await _checkNetwork();
      isConnected.value = hasNetwork;
      if (!hasNetwork) {
        _showNoInternetSnackbar();
      }

      _initDio(); // lu√¥n kh·ªüi t·∫°o Dio ƒë·ªÉ kh√¥ng b·ªã null
    });
  }

  Dio get client => _dio;

  void _initDio() {
    _dio = Dio(
      BaseOptions(
        baseUrl: ApiEndpoint.baseUrl,
        connectTimeout: const Duration(seconds: 10),
        receiveTimeout: const Duration(seconds: 15),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
      ),
    )..interceptors.add(ApiInterceptor());

    log('[ApiClient] ‚úÖ Dio initialized');
  }

  /// Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi th·ª±c t·∫ø (ch·∫Øc ch·∫Øn h∆°n)
  Future<bool> _checkNetwork() async {
    log('[ApiClient] üîç Checking Internet...');
    try {
      final result = await InternetAddress.lookup('google.com');
      final isOnline = result.isNotEmpty && result.first.rawAddress.isNotEmpty;
      log('[ApiClient] üåê Network available: $isOnline');
      return isOnline;
    } on SocketException catch (_) {
      log('[ApiClient] ‚ùå No Internet');
      return false;
    }
  }

  /// X·ª≠ l√Ω khi tr·∫°ng th√°i m·∫°ng thay ƒë·ªïi
  void _handleConnectivityChange(ConnectivityResult result) async {
    final realConnection = await _checkNetwork();
    if (realConnection != isConnected.value) {
      isConnected.value = realConnection;
      if (!realConnection) {
        _showNoInternetSnackbar();
      } else {
        _showInternetRestoredSnackbar();
      }
    }
  }

  void _showNoInternetSnackbar() {
    if (!Get.isSnackbarOpen) {
      Get.snackbar(
        'Kh√¥ng c√≥ k·∫øt n·ªëi',
        'Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng.',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.redAccent,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
    }
  }

  void _showInternetRestoredSnackbar() {
    if (!Get.isSnackbarOpen) {
      Get.snackbar(
        'ƒê√£ k·∫øt n·ªëi m·∫°ng',
        'K·∫øt n·ªëi internet ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c.',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.green,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
    }
  }
}
